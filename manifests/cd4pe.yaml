---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/name: cd4pe
  name: cd4pe
  namespace: '{{repl or (ConfigOption "namespace") "default"}}'
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: cd4pe
  serviceName: cd4pe
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cd4pe
    spec:
      containers:
      - env:
        - name: DB_ENDPOINT
          value: postgres://postgres:5432/cd4pe
        - name: DB_PASS
          value: cd4pe
        - name: DB_USER
          value: cd4pe
        - name: PFI_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: cd4pe-pfi
              key: pfiSecretKey
        image: puppet/continuous-delivery-for-puppet-enterprise:3.x
        name: cd4pe
        ports:
        - name: cd4pe-port
          containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "2048Mi"
            cpu: "2"
        volumeMounts:
        - mountPath: /disk
          name: cd4pe-data
      hostname: cd4pe
      restartPolicy: Always
      volumes:
      - name: cd4pe-data
        persistentVolumeClaim:
          claimName: cd4pe-data
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: cd4pe
  name: cd4pe
  namespace: '{{repl or (ConfigOption "namespace") "default"}}'
spec:
  ports:
  - name: cd4pe-port
    port: 8080
    targetPort: cd4pe-port
  selector:
    app.kubernetes.io/name: cd4pe
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/name: cd4pe
  name: cd4pe-data
  namespace: '{{repl or (ConfigOption "namespace") "default"}}'
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: Secret
metadata:
  name: cd4pe-pfi
  namespace: '{{repl or (ConfigOption "namespace") "default"}}'
type: Opaque
stringData:
  # Gets the secret key from Replicated config.
  pfiSecretKey: '{{repl ConfigOption "pfi_secret_key"}}'
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: cd4pe
  namespace: '{{repl or (ConfigOption "namespace") "default"}}'
  annotations:
    kots.io/exclude: '{{repl or (ConfigOptionEquals "enable_ingress" "1" | not) IsKurl }}'
    kubernetes.io/ingress.allow-http: '{{repl ConfigOptionEquals "allow_http" "1" | not }}'
    nginx.ingress.kubernetes.io/force-ssl-redirect: '{{repl ConfigOptionEquals "allow_http" "1" | not }}'
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "annotations" | nindent 4 }}
spec:
  rules:
    - host: repl{{ or (ConfigOption "hostname") "~" }}
      http:
        paths:
          - path: /
            backend:
              serviceName: cd4pe
              servicePort: 8080
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: cd4pe
  namespace: '{{repl or (ConfigOption "namespace") "default"}}'
  annotations:
    kots.io/exclude: '{{repl or (ConfigOptionEquals "enable_ingress" "1" | not) (not IsKurl) }}'
    kubernetes.io/ingress.allow-http: '{{repl ConfigOptionEquals "allow_http" "1" | not }}'
    nginx.ingress.kubernetes.io/force-ssl-redirect: '{{repl ConfigOptionEquals "allow_http" "1" | not }}'
    kots.io/placeholder: repl{{ printf "'true'" }}repl{{ ConfigOption "annotations" | nindent 4 }}
spec:
  tls:
    - hosts:
        - repl{{ ConfigOption "hostname" }}
      secretName: kotsadm-tls
  rules:
    - host: repl{{ ConfigOption "hostname" }}
      http:
        paths:
          - path: /
            backend:
              serviceName: cd4pe
              servicePort: 8080
